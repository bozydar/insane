file = { SOI ~ import ~ (type_alias)* ~ expression ~ exposition ~ definitions ~ EOI }

newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | newline }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string_quoted = _{ "\"" ~ string ~ "\"" }
string = @{ char* }
char = _{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

ns_ident = { ident ~ "." ~ ident }
ident = @{ !(keywords~ WHITESPACE*) ~ (ASCII_ALPHA | "_" ) ~ (ASCII_ALPHANUMERIC | "_" )* }

let_in = { "let" ~ ident_expr ~ ("and" ~ "let" ~ ident_expr)*  ~ "in" ~ expr }
ident_expr = { ident ~ explicit_type_expr? ~ "=" ~ expr }
fun = { "fun" ~ args ~ "=>" ~ expr }
args = { ident+ }
explicit_type_expr = { ":" ~ type_expr }


operator = _{ op_left_pipe | op_right_pipe | op_dollar | op_plus | op_minus | op_star | op_slash | op_eq | op_neq | op_comma }
op_left_pipe = { "|>" }
op_right_pipe = { "<|" }
op_dollar = { "$" }
op_plus = { "+" }
op_minus = { "-" }
op_star = { "*" }
op_slash = { "/" }
op_eq = { "==" }
op_neq = { "!="}
op_comma = { "," }

list = { "[" ~ expr? ~ (";" ~ expr)* ~ "]" }
structure = { "{" ~ field_value? ~ (";" ~ field_value)* ~ "}" }
field_value = { ident ~ ":" ~ expr }
if_then_else = { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr }

expr = _{ infix | let_in | fun | if_then_else | term }
infix = { term ~ (operator ~ term)+ }
term = _{  "(" ~ expr ~ ")" | structure | list | ns_ident | ident | constant}
constant = { number | string_quoted }

exposition = { ("give" ~ "(" ~ ident+ ~ ")" )? }
import = { ("use" ~ "(" ~ ident+ ~ ")")? }
definitions = { definition* }

type_alias = { "type" ~ ident ~ "=" ~ type_expr  }
type_expr = { type_infix  | type_term }
type_term = { "(" ~ type_expr ~ ")" |  complex_type | simple_type }
type_infix = { type_term ~ (type_operator ~ type_term)+  }
type_operator = { "," }
simple_type = { ident | unit }
unit = { "{" ~ "}" }

complex_type = { "{" ~ (union | record | tuple) ~ "}" }
tuple = { type_expr ~ (";" ~ type_expr)* }
record = { ";" ~ record_field ~ (record)* }
record_field = { ident ~ ":" ~ type_expr  }
union = { "|" ~ union_constructor ~ (union)* }
union_constructor = { ident ~ ":" ~ type_expr  }

definition = { "def" ~ ident_expr }
expression = { expr? }

keywords = {
  "let" | "fun" | "def" | "and" | "use"  | "give" | "if" | "then" | "else" | "type"
}
